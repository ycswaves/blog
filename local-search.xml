<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Advent of Code 2020 - Day 2</title>
    <link href="/blog/2020/12/06/Advent-of-Code-2020-Day-2/"/>
    <url>/blog/2020/12/06/Advent-of-Code-2020-Day-2/</url>
    
    <content type="html"><![CDATA[<h2 id="Part-1"><a href="#Part-1" class="headerlink" title="Part 1"></a>Part 1</h2><p>Three different ways to solve part 1</p><h3 id="Method-1"><a href="#Method-1" class="headerlink" title="Method 1"></a>Method 1</h3><p>Remove all the required letter in the password and compare with the original password and count how many letters are missing.<br>This number is essentially the number of occurences of the required letters in the password.</p><pre class="line-numbers language-elixir" data-language="elixir"><code class="language-elixir"><span class="token keyword">defmodule</span> Password <span class="token keyword">do</span>  <span class="token attribute variable">@input_file_path</span> Path<span class="token punctuation">.</span>expand<span class="token punctuation">(</span><span class="token string">'./input.txt'</span><span class="token punctuation">,</span> __DIR__<span class="token punctuation">)</span>  <span class="token keyword">def</span> validate_method1<span class="token punctuation">(</span>entry<span class="token punctuation">)</span> <span class="token keyword">do</span>    <span class="token punctuation">[</span>range<span class="token punctuation">,</span> required_letter<span class="token punctuation">,</span> password<span class="token punctuation">]</span> <span class="token operator">=</span> tokenize_rule<span class="token punctuation">(</span>entry<span class="token punctuation">)</span>    password_without_required <span class="token operator">=</span> String<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>password<span class="token punctuation">,</span> required_letter<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>    required_letter_count <span class="token operator">=</span> String<span class="token punctuation">.</span>length<span class="token punctuation">(</span>password<span class="token punctuation">)</span> <span class="token operator">-</span> String<span class="token punctuation">.</span>length<span class="token punctuation">(</span>password_without_required<span class="token punctuation">)</span>    <span class="token punctuation">[</span>min<span class="token punctuation">,</span> max<span class="token punctuation">]</span> <span class="token operator">=</span> parse_range<span class="token punctuation">(</span>range<span class="token punctuation">)</span>    min <span class="token operator">&lt;=</span> required_letter_count <span class="token keyword">and</span> required_letter_count <span class="token operator">&lt;=</span> max  <span class="token keyword">end</span>  <span class="token keyword">defp</span> parse_range<span class="token punctuation">(</span>range<span class="token punctuation">)</span> <span class="token keyword">do</span>    range    <span class="token operator">|></span> String<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span>    <span class="token operator">|></span> Enum<span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token capture function">&amp;String.to_integer/1</span><span class="token punctuation">)</span>  <span class="token keyword">end</span>  <span class="token keyword">defp</span> tokenize_rule<span class="token punctuation">(</span>entry<span class="token punctuation">)</span> <span class="token keyword">do</span>    <span class="token punctuation">[</span>range<span class="token punctuation">,</span> required_letter<span class="token punctuation">,</span> password<span class="token punctuation">]</span> <span class="token operator">=</span> String<span class="token punctuation">.</span>split<span class="token punctuation">(</span>entry<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span>    <span class="token comment"># convert 'a:' to 'a'</span>    required_letter <span class="token operator">=</span> String<span class="token punctuation">.</span>first<span class="token punctuation">(</span>required_letter<span class="token punctuation">)</span>    <span class="token punctuation">[</span>range<span class="token punctuation">,</span> required_letter<span class="token punctuation">,</span> password<span class="token punctuation">]</span>  <span class="token keyword">end</span>  <span class="token keyword">def</span> load_report <span class="token keyword">do</span>    File<span class="token punctuation">.</span>read!<span class="token punctuation">(</span><span class="token attribute variable">@input_file_path</span><span class="token punctuation">)</span>    <span class="token operator">|></span> String<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span> <span class="token attr-name">trim:</span> <span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token keyword">end</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Method-2"><a href="#Method-2" class="headerlink" title="Method 2"></a>Method 2</h3><p>Split the password string into a list of letters and use <a href="https://hexdocs.pm/elixir/Enum.html#frequencies/1"><code>Enum.frequencies/1</code></a> to get the number of occurences of the required letter.<br>One edge case is the the required letter may not appear at all. In this case, the pattern-match<br>on the result map will throw an error and therefore requires a <code>try-catch</code> block.</p><pre class="line-numbers language-elixir" data-language="elixir"><code class="language-elixir"><span class="token keyword">defmodule</span> Password <span class="token keyword">do</span>  <span class="token comment"># ...</span>  <span class="token keyword">def</span> validate_method2<span class="token punctuation">(</span>entry<span class="token punctuation">)</span> <span class="token keyword">do</span>    <span class="token punctuation">[</span>range<span class="token punctuation">,</span> required_letter<span class="token punctuation">,</span> password<span class="token punctuation">]</span> <span class="token operator">=</span> tokenize_rule<span class="token punctuation">(</span>entry<span class="token punctuation">)</span>    <span class="token keyword">try</span> <span class="token keyword">do</span>      <span class="token punctuation">%</span><span class="token punctuation">&#123;</span><span class="token operator">^</span>required_letter <span class="token operator">=></span> count<span class="token punctuation">&#125;</span> <span class="token operator">=</span>        password        <span class="token operator">|></span> String<span class="token punctuation">.</span>graphemes<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">|></span> Enum<span class="token punctuation">.</span>frequencies<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">[</span>min<span class="token punctuation">,</span> max<span class="token punctuation">]</span> <span class="token operator">=</span> parse_range<span class="token punctuation">(</span>range<span class="token punctuation">)</span>      min <span class="token operator">&lt;=</span> count <span class="token keyword">and</span> max <span class="token operator">>=</span> count    <span class="token keyword">rescue</span>      _ <span class="token operator">-></span>        <span class="token boolean">false</span>    <span class="token keyword">end</span>  <span class="token keyword">end</span>  <span class="token comment"># ...</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Method-3"><a href="#Method-3" class="headerlink" title="Method 3"></a>Method 3</h3><p>Using regex pattern like <code>/^[^#&#123;required_letter&#125;]*#&#123;required_letter&#125;&#123;#&#123;range&#125;&#125;[^#&#123;required_letter&#125;]*$/</code>.<br>For exmaple, to validate this password entry <code>7-9 q: qqqqlqmqqq</code></p><ol><li>sort the password, <code>qqqqlqmqqq</code> -&gt; <code>lmqqqqqqqq</code></li><li>construct the regex, <code>/^[^q]*q&#123;7,9&#125;[^q]*/$</code>, we need to make sure the sorted password starts and ends with letters that are different from the required letter (if any) to avoid the false-positive case where required letter excceeds the upper limit<pre class="line-numbers language-elixir" data-language="elixir"><code class="language-elixir"><span class="token keyword">defmodule</span> Password <span class="token keyword">do</span>  <span class="token comment"># ...</span>  <span class="token keyword">def</span> validate_method3<span class="token punctuation">(</span>entry<span class="token punctuation">)</span> <span class="token keyword">do</span>    <span class="token punctuation">[</span>range<span class="token punctuation">,</span> required_letter<span class="token punctuation">,</span> password<span class="token punctuation">]</span> <span class="token operator">=</span> tokenize_rule<span class="token punctuation">(</span>entry<span class="token punctuation">)</span>    range <span class="token operator">=</span> String<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>range<span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span>    validation_regex <span class="token operator">=</span>      Regex<span class="token punctuation">.</span>compile!<span class="token punctuation">(</span><span class="token string">"^[^<span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span>required_letter<span class="token delimiter punctuation">&#125;</span></span>]*<span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span>required_letter<span class="token delimiter punctuation">&#125;</span></span>&#123;<span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span>range<span class="token delimiter punctuation">&#125;</span></span>&#125;[^<span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span>required_letter<span class="token delimiter punctuation">&#125;</span></span>]*$"</span><span class="token punctuation">)</span>    sorted_password <span class="token operator">=</span>      password      <span class="token operator">|></span> String<span class="token punctuation">.</span>graphemes<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token operator">|></span> Enum<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token operator">|></span> Enum<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    String<span class="token punctuation">.</span>match?<span class="token punctuation">(</span>sorted_password<span class="token punctuation">,</span> validation_regex<span class="token punctuation">)</span>  <span class="token keyword">end</span>  <span class="token comment"># ...</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Part-2"><a href="#Part-2" class="headerlink" title="Part 2"></a>Part 2</h2>The new validation rule is simpler to validate against.<pre class="line-numbers language-elixir" data-language="elixir"><code class="language-elixir"><span class="token keyword">defmodule</span> Password <span class="token keyword">do</span>  <span class="token comment"># ...</span>  <span class="token keyword">def</span> validate_by_new_rule<span class="token punctuation">(</span>entry<span class="token punctuation">)</span> <span class="token keyword">do</span>    <span class="token punctuation">[</span>range<span class="token punctuation">,</span> required_letter<span class="token punctuation">,</span> password<span class="token punctuation">]</span> <span class="token operator">=</span> tokenize_rule<span class="token punctuation">(</span>entry<span class="token punctuation">)</span>    <span class="token punctuation">[</span>pos1<span class="token punctuation">,</span> pos2<span class="token punctuation">]</span> <span class="token operator">=</span> parse_range<span class="token punctuation">(</span>range<span class="token punctuation">)</span>    is_at_pos1 <span class="token operator">=</span> String<span class="token punctuation">.</span>at<span class="token punctuation">(</span>password<span class="token punctuation">,</span> pos1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> required_letter    is_at_pos2 <span class="token operator">=</span> String<span class="token punctuation">.</span>at<span class="token punctuation">(</span>password<span class="token punctuation">,</span> pos2 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> required_letter    is_at_pos1 <span class="token operator">!=</span> is_at_pos2  <span class="token keyword">end</span>  <span class="token comment"># ...</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>Full solution can be found <a href="https://github.com/ycswaves/aoc-2020/blob/main/lib/day2">here</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>aoc2020, elixir</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Advent of Code 2020 - Day 1</title>
    <link href="/blog/2020/12/05/Advent-of-Code-2020-Day-1/"/>
    <url>/blog/2020/12/05/Advent-of-Code-2020-Day-1/</url>
    
    <content type="html"><![CDATA[<p>Challenges in Day 1 are essentially the <a href="https://leetcode.com/problems/two-sum/">“Two Sum” problem</a>.</p><h2 id="Solution-to-part-1"><a href="#Solution-to-part-1" class="headerlink" title="Solution to part 1"></a>Solution to part 1</h2><pre class="line-numbers language-elixir" data-language="elixir"><code class="language-elixir"><span class="token keyword">defmodule</span> Report <span class="token keyword">do</span>  <span class="token attribute variable">@input_file_path</span> Path<span class="token punctuation">.</span>expand<span class="token punctuation">(</span><span class="token string">'./input.txt'</span><span class="token punctuation">,</span> __DIR__<span class="token punctuation">)</span>  <span class="token keyword">def</span> report<span class="token punctuation">(</span>report_in_list<span class="token punctuation">,</span> target_sum<span class="token punctuation">)</span> <span class="token keyword">do</span>    report_in_map <span class="token operator">=</span> Map<span class="token punctuation">.</span>new<span class="token punctuation">(</span>report_in_list<span class="token punctuation">,</span> <span class="token capture function">&amp;&#123;&amp;1,</span> <span class="token argument variable">&amp;1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    report_in_list    <span class="token operator">|></span> Enum<span class="token punctuation">.</span>reduce<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> calculate<span class="token punctuation">(</span>report_in_map<span class="token punctuation">,</span> target_sum<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">end</span>  <span class="token keyword">def</span> calculate<span class="token punctuation">(</span>map<span class="token punctuation">,</span> target_sum<span class="token punctuation">)</span> <span class="token keyword">do</span>    <span class="token keyword">fn</span> x<span class="token punctuation">,</span> result <span class="token operator">-></span>      target <span class="token operator">=</span> Map<span class="token punctuation">.</span>get<span class="token punctuation">(</span>map<span class="token punctuation">,</span> target_sum <span class="token operator">-</span> x<span class="token punctuation">)</span>      <span class="token keyword">cond</span> <span class="token keyword">do</span>        result <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-></span> result        target <span class="token operator">-></span> target <span class="token operator">*</span> x        <span class="token boolean">true</span> <span class="token operator">-></span> result      <span class="token keyword">end</span>    <span class="token keyword">end</span>  <span class="token keyword">end</span>  <span class="token keyword">def</span> load_report <span class="token keyword">do</span>    File<span class="token punctuation">.</span>read!<span class="token punctuation">(</span><span class="token attribute variable">@input_file_path</span><span class="token punctuation">)</span>    <span class="token operator">|></span> String<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span> <span class="token attr-name">trim:</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token operator">|></span> Enum<span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token capture function">&amp;String.to_integer/1</span><span class="token punctuation">)</span>  <span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Solution-to-part-2"><a href="#Solution-to-part-2" class="headerlink" title="Solution to part 2"></a>Solution to part 2</h2><pre class="line-numbers language-elixir" data-language="elixir"><code class="language-elixir"><span class="token keyword">def</span> report_three<span class="token punctuation">(</span>report_in_list<span class="token punctuation">,</span> target_sum<span class="token punctuation">)</span> <span class="token keyword">do</span>  report_in_list  <span class="token operator">|></span> Enum<span class="token punctuation">.</span>reduce<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">fn</span> x<span class="token punctuation">,</span> result <span class="token operator">-></span>    two_sum <span class="token operator">=</span> report<span class="token punctuation">(</span>report_in_list<span class="token punctuation">,</span> target_sum <span class="token operator">-</span> x<span class="token punctuation">)</span>    <span class="token keyword">cond</span> <span class="token keyword">do</span>      result <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-></span> result      two_sum <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-></span> two_sum <span class="token operator">*</span> x      <span class="token boolean">true</span> <span class="token operator">-></span> result    <span class="token keyword">end</span>  <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Key-takeaway"><a href="#Key-takeaway" class="headerlink" title="Key takeaway"></a>Key takeaway</h3><ul><li>A list can be converted into a map using <code>Map.new/2</code> and return a two-element tuple ({key, val}) in the callback function</li><li>Use <code>cond do ...</code> instead of <code>if-elseif-else</code></li><li><code>String.split</code> may return empty strings, add <code>trim: true</code> (default is <code>false</code>) to avoid that</li></ul><p>Full solution can be found <a href="https://github.com/ycswaves/aoc-2020/blob/main/lib/day1">here</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>aoc2020, elixir</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vim Fold How-To</title>
    <link href="/blog/2020/11/16/vim-fold-how-to/"/>
    <url>/blog/2020/11/16/vim-fold-how-to/</url>
    
    <content type="html"><![CDATA[<p>There are multiple folding methods in Vim, and the two most frequently used methods I’ve been using are:</p><h1 id="Manual"><a href="#Manual" class="headerlink" title="Manual"></a>Manual</h1><p>Folds must be defined by entering commands such as <code>zf</code>, which is the default folding method if there’s no <code>foldmethod</code> specified.<br>You can use vim command:</p><pre class="line-numbers language-none"><code class="language-none">set foldmethod&#x3D;[manual|indent|syntax|...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>to specify the folding method in the current window.</p><p>In normal mode, a fold can be created by typing:</p><pre class="line-numbers language-none"><code class="language-none">zf&#123;motion&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Example 1 - Folds the current line along with the following 3 lines</p><img src="/blog/2020/11/16/vim-fold-how-to/zf3j.gif" class="" title="folds the current line along with the following 3 lines"><p>Example 2 - Folds the current line till the end of the file</p><img src="/blog/2020/11/16/vim-fold-how-to/zfG.gif" class="" title="folds the current line till the end of the file"><h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><p>Syntax fold can be activated by running <code>setlocal foldmethod=syntax</code> in Vim command mode. In this mode, fold can be created based on the syntax. For example, you can create a fold around a code block or function declaration.</p><p>Example 3 - Fold a block</p><img src="/blog/2020/11/16/vim-fold-how-to/zcBlock.gif" class="" title="create a fold around a code block"><p>Example 4 - Fold a variable assignment</p><img src="/blog/2020/11/16/vim-fold-how-to/zcAssignment.gif" class="" title="create a fold around a variable assignment"><h1 id="Common-commands"><a href="#Common-commands" class="headerlink" title="Common commands"></a>Common commands</h1><ul><li><code>zr</code>: reduces fold level throughout the buffer</li><li><code>zR</code>: opens all folds</li><li><code>zm(inimize)</code>: increases fold level throughout the buffer</li><li><code>zM</code>: folds everything all the way</li><li><code>za(lternate)</code>: alternate a fold your cursor is on</li><li><code>zA</code>: alternate a fold your cursor is on recursively</li><li><code>zc(lose)</code>: close a fold your cursor is on</li><li><code>zC</code>: close a fold your cursor is on recursively</li><li><code>zo(pen)</code>: open one fold under the cursor.</li><li><code>zO</code>: open all fold under the cursor.</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Avoid Redirects</title>
    <link href="/blog/2015/09/08/web-performance-avoid-redirects/"/>
    <url>/blog/2015/09/08/web-performance-avoid-redirects/</url>
    
    <content type="html"><![CDATA[<p>A <code>redirect</code> is used to reroute users from ono URL to another, <code>301</code> and <code>302</code> are the most popular ones. Redirects are usually done for HTML documents, but may also be used when requesting components in the page (images, scripts, etc.).</p><h3 id="Types-of-Redirects"><a href="#Types-of-Redirects" class="headerlink" title="Types of Redirects"></a>Types of Redirects</h3><p>When web servers return a redirect to the browser, the response has a status code in the 3xx Ramge:</p><ul><li>300 Multiple Choices (based on Content-Type)</li><li>301 Moved Permanently</li><li>302 Moved Temporarily (a.k.a Found)</li><li>303 See Other (clarification of 302)</li><li>304 Not Modified (not really a redirect, used in response to condtional GET)</li><li>305 Use Proxy</li><li>306 (no longer used)</li><li>307 Temporary Redirect (clarification of 302)</li></ul>]]></content>
    
    
    <categories>
      
      <category>notes</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Minify JavaScript</title>
    <link href="/blog/2015/08/19/web-performance-minify/"/>
    <url>/blog/2015/08/19/web-performance-minify/</url>
    
    <content type="html"><![CDATA[<p><strong>Minification</strong> is the practice of removing unnecessary characters (that includes all comments and unneeded whitespace characters) from code to reduce its size, thereby improving load times.</p><p><strong>Obfuscation</strong> is an alternative optimization that can be applied to source code. Besides doing what minification does, it also converts function and variable names into smaller strings making the code more compact and harder to read. However, obfuscation has three main drawbacks:</p><ul><li><p><strong>Bugs</strong>: There’s a high chance of introducing errors into the code as a result of the obfuscation process itself.</p></li><li><p><strong>Maintenance</strong>: Since obfuscation changes JS symbols, any symbols that should not be changed (e.g API functions) must be tagged so that the obfuscator leaves them unaltered.</p></li><li><p><strong>Debugging</strong>: Obfuscated codes are more difficult to read, therefore, harder to debug in production environment.</p></li></ul><p>Some popular tools for minifying JavaScript:</p><ul><li><a href="http://crockford.com/javascript/jsmin">JSMin</a></li><li><a href="http://shrinksafe.dojotoolkit.org/">Dojo (ShrinkSafe)</a></li></ul><h3 id="The-Savings"><a href="#The-Savings" class="headerlink" title="The Savings"></a>The Savings</h3><p>On average, JSMin reduced the size of JavaScript files by 21%, while Dojo Compressor achieved a 25% reduction. And generally one should choose minification over obfuscation, thus avoiding the possible problems that obfuscation can cause. The effectiveness on reduction of file size will be even closer for minification and obfuscation, when they are used together with gzip compression.</p><h3 id="Inline-Scripts"><a href="#Inline-Scripts" class="headerlink" title="Inline Scripts"></a>Inline Scripts</h3><p>Inline JavaScript blocks should also be minified, though it is less evident nowadays. In practice, minifying inlines is easier than that of externals because there is probably a version of JSMin in whatever page generation platform one uses. Once the functionality is available, all inlines can be minified before being echoed to the HTML document.</p><h3 id="Gzip-and-Minification"><a href="#Gzip-and-Minification" class="headerlink" title="Gzip and Minification"></a>Gzip and Minification</h3><p>Gzip compression decreases file sizes more than minification. It could be questionable that minification is worthwhile when gzip compression has already been enabled.</p><table><thead><tr><th align="center">File size</th><th align="center">JSMin</th><th align="center">Gzip</th><th align="center">Savings</th></tr></thead><tbody><tr><td align="center">85KB</td><td align="center">No</td><td align="center">No</td><td align="center">-</td></tr><tr><td align="center">68KB</td><td align="center">Yes</td><td align="center">No</td><td align="center">21%</td></tr><tr><td align="center">23KB</td><td align="center">No</td><td align="center">Yes</td><td align="center">73%</td></tr><tr><td align="center">19KB</td><td align="center">Yes</td><td align="center">Yes</td><td align="center">78%</td></tr></tbody></table><h3 id="Minifying-CSS"><a href="#Minifying-CSS" class="headerlink" title="Minifying CSS"></a>Minifying CSS</h3><p>The savings from minifying CSS are typically less than the savings from minifying JS because CSS generally has fewer comments and less whitespace. The greatest potential for size savings comes from optimizing CSS - merging identical classes, removing unused classes, etc.</p>]]></content>
    
    
    <categories>
      
      <category>notes</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Reduce DNS Lookups</title>
    <link href="/blog/2015/08/14/web-performance-reduce-dns-lookup/"/>
    <url>/blog/2015/08/14/web-performance-reduce-dns-lookup/</url>
    
    <content type="html"><![CDATA[<p>The role of the Domain Name System(DNS) is to map hostnames to IP addresses. When a user type a URL into the browser, a DNS resolver will return the IP address of the server hosting the site that the user requested.</p><p>If a server is replaced by one with a different IP address, DNS allows users to use the same hostname to connect to the new server; if multiple IP addresses can be associated with a hostname, DNS provides a high degree of redundancy for a web site.</p><p>DNS typically takes 20~120 ms for the browser to look up the IP address for a given hostname. The browser can’t download anything from this hostname until the DNS lookup is completed. The response time depends on the DNS resolver:</p><ul><li>The load of requests on it</li><li>User’s proximity to it</li><li>User’s bandwidth speed</li></ul><h3 id="DNS-Caching-and-TTLs"><a href="#DNS-Caching-and-TTLs" class="headerlink" title="DNS Caching and TTLs"></a>DNS Caching and TTLs</h3><p>DNS lookups are cached for bettern performance. There are multiple occasions of DNS being cached. One can occur on a special caching server maintained by the user’s ISP or LAN. Another two are at user’s side, one is in OS and the other in browser. If browser keeps a DNS record in its cache, then no need to bother OS. Otherwise, OS will either retrieve from its own cache or sends a request to a remote server (where potential slowdowns occur). In addtion, IP addresses could change and DNS caches consume memory. Therefore, the DNS records have to be periodically flushed from the cache, and several different configuration settings determine how often they are discarded.</p><h4 id="Factors-Affecting-DNS-Caching"><a href="#Factors-Affecting-DNS-Caching" class="headerlink" title="Factors Affecting DNS Caching"></a>Factors Affecting DNS Caching</h4><p>The DNS record returned from a lookup contains a time-to-live (TTL) value. This tells the client how long the record can be cached.</p><p>While DNS cache in the OS respect the TTL, browsers often ignore it and set their own time limit. Furthermore, the <code>Keep-Alive</code> feature of the HTTP can override both the TTL and the browser’s time limit.</p><p>Browsers put a limit on the number of DNS records cached, regardless of the time the records have been in the cache. Once reaching limit, early DNS records are discarded. However, the OS cache might still be there and that saves the effort to query for the record over the network.</p><h4 id="TTL-Values"><a href="#TTL-Values" class="headerlink" title="TTL Values"></a>TTL Values</h4><p>The TTL can range from 1 minute to 1 hour. If failover (when old server goes offline and new ones deployed) is critical, short TTL is chosen. Otherwise a longer TTL makes more sense because it reduces the number of DNS lookups.</p><h3 id="Reducing-DNS-Lookups"><a href="#Reducing-DNS-Lookups" class="headerlink" title="Reducing DNS Lookups"></a>Reducing DNS Lookups</h3><p>The number of DNS lookups is equal to the number of unique hostnames in the web page. Reducing the number of unique hostnames reduces the number of DNS lookups. However, it has the potential to reduce the amount of parallel downloading. So the general guideline is to use at least 2 but no more than 4 hostnames. This results in a good compromise between reducing DNS lookups and allowing a high degree of parallel downloads. Also, make sure the server supports <code>Keep-Alive</code>, that helps reducing DNS lookups too.</p>]]></content>
    
    
    <categories>
      
      <category>notes</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Make JavaScript and CSS External</title>
    <link href="/blog/2015/08/10/web-performance-make-js-css-external/"/>
    <url>/blog/2015/08/10/web-performance-make-js-css-external/</url>
    
    <content type="html"><![CDATA[<p>In raw terms, placing JS and CSS files inline is faster because placing externally causes overhead of multiple HTTP requests. However, using external files in the real world generally produces faster page because of the benefit of being cached by the browser and the HTML document size will also be reduced by moving inline JS and CSS out of itself.</p><p>The key factor is the frequency with which external JS and CSS files are cached relative to the number of HTML documents requested. This can be gauged using following metrics:</p><ul><li><p><strong>Page Views:</strong> fewer page views per user, the stronger the argument for inlining JS/CSS and vice versa.</p></li><li><p><strong>Empty/Primed Cache:</strong> if the nature of your site results in higher primed cache rates for your users, the benefit of using external files is greater. Users may show up with an empty cache, but make serveral subsequent page views with a primed cache.</p></li><li><p><strong>Component Reuse:</strong> if the JS and CSS files can be shared among multiple pages, using external files becomes more advantageous. However, the caveat here is that you may end up with either “few very big files” or “many small files”. Only if you can find a balance that results in a high reuse rate, make JS/CSS external is the way to go, otherwise inlining might make more sense.</p></li></ul><h3 id="Home-Pages"><a href="#Home-Pages" class="headerlink" title="Home Pages"></a>Home Pages</h3><p>Home page might be the only exception where inlining is preferable. Take a look at the three metrics mentioned above from the perspective of home pages:</p><p><em>Page Views:</em> Home pages have a high number of page views per month but often only one page view per session.</p><p><em>Empty/Primed Cache:</em> The primed cache percentage might be lower than other sites. For security reasons, many users elect to clear the cache every time they close the browser.</p><p><em>Component Reuse:</em> The reuse rate is low. Many home pages are the only page a user visits on the site, so there is really no reuse.</p><h3 id="The-Best-of-Both-Worlds"><a href="#The-Best-of-Both-Worlds" class="headerlink" title="The Best of Both Worlds"></a>The Best of Both Worlds</h3><p>Even if all the factors point to inlining, it still feels inefficient to add all that JS and CSS to the page and not take advantage of the browser’s cache. Two techniques are described here that allow you to gain the benefits of inlining, as well as caching external files.</p><h4 id="Post-Onload-Download"><a href="#Post-Onload-Download" class="headerlink" title="Post-Onload Download"></a>Post-Onload Download</h4><p>Home page itself might be a good place to apply inlining, but also used to leverage external files for all secondary page views. This is accomplished by dynamically downloading the JS/CSS files in the home page (even if they might not be used in home page) after it has completely loaded. This places the external files in the browser’s cache <strong>in anticipation of</strong> the user continuing on to other pages.</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">function</span> <span class="token function">postOnload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span>downloadCompo<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//one second delay to make sure the page is completely rendered</span><span class="token punctuation">&#125;</span>window<span class="token punctuation">.</span>onload <span class="token operator">=</span> postOnload<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">downloadCompo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">downloadJS</span><span class="token punctuation">(</span><span class="token string">"http://example.com/example.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">downloadCSS</span><span class="token punctuation">(</span><span class="token string">"http://example.com/example.css"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">downloadJS</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  script<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">downloadCSS</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> css <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"link"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  css<span class="token punctuation">.</span>rel <span class="token operator">=</span> <span class="token string">"stylesheet"</span><span class="token punctuation">;</span>  css<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">"text/css"</span><span class="token punctuation">;</span>  css<span class="token punctuation">.</span>href <span class="token operator">=</span> url<span class="token punctuation">;</span>  document<span class="token punctuation">.</span>bodu<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>css<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In case of double definition (same piece of code appears in both inlining and external files), inserting these components into an invisible <code>iframe</code> could tackle this problem.</p><h4 id="Dynamic-Inlining"><a href="#Dynamic-Inlining" class="headerlink" title="Dynamic Inlining"></a>Dynamic Inlining</h4><p>This technique make use of the previous technique plus returning a session-based cookie with the components, to let the home page server to decide whether to use inline or extenal JS/CSS.</p><p>The first time a user visit the page, the cookie is not present and the server will generate a page that inlines the components and then use the “Post-Onload Download” technique to prepare the external files for the next visit. So the next time the page is visited, the server sees the cookie and generate a page that uses external files which most likely have been cached.</p>]]></content>
    
    
    <categories>
      
      <category>notes</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Avoid CSS Expressions</title>
    <link href="/blog/2015/08/08/web-performance-avoid-css-expressions/"/>
    <url>/blog/2015/08/08/web-performance-avoid-css-expressions/</url>
    
    <content type="html"><![CDATA[<p>CSS expressions are a powerful but dangerous way to set CSS properties dynamically. They are supported in IE version 5 and later (<a href="https://msdn.microsoft.com/en-us/library/ms537634(v=vs.85).aspx">but are no longer supported in IE8 and later</a>).</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">expression</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>new <span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>.<span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span>%2 ? <span class="token string">"#B8D4FF"</span> <span class="token punctuation">:</span> <span class="token string">"#F08A00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>The above example shows how background color could be set to alternate every hour using CSS expression. The expression method is ignored by all browsers other than IE, so it’s a useful tool for setting properties in IE to create consistent experience across browsers. For instance, IE6 doesn’t support <code>min-width</code>, you may use following css rules to achieve that: </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">expression</span><span class="token punctuation">(</span> document.body.clientWidth &lt; 600 ? <span class="token string">"600px"</span> <span class="token punctuation">:</span> <span class="token string">"auto"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">min-width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Browsers support <code>min-width</code> will ignore the first rule while IE6 ignore the <code>min-width</code> property and sets the <code>width</code> property dynamically based on the width of the document.</p><h3 id="Updating-Expressions"><a href="#Updating-Expressions" class="headerlink" title="Updating Expressions"></a>Updating Expressions</h3><p>The problem with expressions is that they’re evaluated <strong>too frequently</strong>. They’re evaluated when:</p><ul><li>Page is rendered and resized</li><li>Page is scrolled</li><li>User moves the mouse over the page</li></ul><p>Moving the mouse around the page can easily generate &gt;10,000 evaluations. Worst of all, clicking in the text input field locks up IE and you have to kill the process.</p><h3 id="Working-Around"><a href="#Working-Around" class="headerlink" title="Working Around"></a>Working Around</h3><p>The working around is to use JavaScript to achieve the dynamic change, either define a function to do a one-time expressions or an event handler to respond to the intended action only to avoid evaluation of the expression during unrelated events.</p>]]></content>
    
    
    <categories>
      
      <category>notes</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Put Scripts at the Bottom</title>
    <link href="/blog/2015/08/06/web-performance-scripts-at-bottom/"/>
    <url>/blog/2015/08/06/web-performance-scripts-at-bottom/</url>
    
    <content type="html"><![CDATA[<p>With scripts, progressive rendering is blocked for all content <em>below</em> the script. Moving scripts lower in the page means more content is rendered progressively.</p><h3 id="Parallel-Downloads"><a href="#Parallel-Downloads" class="headerlink" title="Parallel Downloads"></a>Parallel Downloads</h3><p>Response time mainly affected by the number of compoments (resource files) in the page. Each component generate an HTTP request. Browser performs HTTP requests in parallel but <strong>can’t</strong> download them all at once.</p><p>HTTP/1.1 suggests browsers to download two componnents in parallel per hostname. If a web page evenly distribute its components across two hostnames, the overall response would be about twice as fast. </p><p>Limiting parallel downloads to two per hostname is a guideline. However, users can modify this setting in their browsers, and front-end engineers could use CNAMEs(DNS aliases) to split their components across multiple hostnames. Too many parallel downloads can degrade performance. Research at Yahoo! shows that splitting components across <strong>two</strong> hostnames leads to better performance than using 1, 4 or 10 hostnames.</p><h3 id="Scripts-Block-Downloads"><a href="#Scripts-Block-Downloads" class="headerlink" title="Scripts Block Downloads"></a>Scripts Block Downloads</h3><p>The benefits of parallel downloading is clear. However, parallel downloading is <strong>disabled</strong> while a <strong>script</strong> is downloading, even on different hostnames because:</p><ul><li>The script may use <code>document.write</code> to alter the page content, so the browser waits to make sure the page is laid out appropriately.</li><li>To guarantee that the scripts are executed in the proper order, otherwise executing them out of order would result in JavaScript errors.</li></ul><h3 id="Putting-It-in-Perspective"><a href="#Putting-It-in-Perspective" class="headerlink" title="Putting It in Perspective"></a>Putting It in Perspective</h3><p>In some situations, it’s not easy to move scripts to the bottom. For example if the script use <code>document.write</code> to insert part of the page’s content. There might also be scoping issues. If that script doesn’t contain <code>document.write</code>, you may use <em>deferred</em> scripts as a clue to browers that they can continue rendering. However, in Firefox, even deferred scripts block rendering and parallel downloads.</p>]]></content>
    
    
    <categories>
      
      <category>notes</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Put Stylesheets at the Top</title>
    <link href="/blog/2015/08/04/web-performance-stylesheets-on-top/"/>
    <url>/blog/2015/08/04/web-performance-stylesheets-on-top/</url>
    
    <content type="html"><![CDATA[<p>If certain portion of the web page, say a pop-up DIV, is only accessible when the parent page has been loaded, will putting the link to the stylesheet of that DIV at the bottom of the page help page load faster? <strong>It may not help</strong></p><h3 id="Progressive-Rendering"><a href="#Progressive-Rendering" class="headerlink" title="Progressive Rendering"></a>Progressive Rendering</h3><p>The problem with putting stylesheets near the bottom of the page is that it prohibits progressive rending in many browsers. Browsers block rendering to <strong>avoid having to redraw elements of the page</strong> if their style change. The browser delays showing any visible components while it and the user wait for the stylesheet at the bottom. </p><h3 id="CSS-at-the-Top"><a href="#CSS-at-the-Top" class="headerlink" title="CSS at the Top"></a>CSS at the Top</h3><p>To avoid the blank white screen at the very first beginning of page loading, especially in IE, move the stylesheet to the top in the HTML’s <code>&lt;head&gt;</code> section so that the page can render progressively.</p><h4 id="Two-ways-of-including-a-stylesheet-in-HTML"><a href="#Two-ways-of-including-a-stylesheet-in-HTML" class="headerlink" title="Two ways of including a stylesheet in HTML"></a>Two ways of including a stylesheet in HTML</h4><p>Link tag:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>styles1.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>@import:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token atrule"><span class="token rule">@import</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"styles2.css"</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Benefits of <code>&lt;link&gt;</code> over <code>@import</code>:</p><ul><li><code>@import</code> must precede all other rules, otherwise it might be ignored</li><li><code>@import</code> may still be downloaded much later even if it’s in <code>&lt;head&gt;</code></li></ul><p>Cases when use <code>@import</code> is appropriate:</p><ul><li>Use inside <code>@media</code> to import device specific stylsheets</li><li>Import Google fonts to avoid paste a <code>link</code> into every page using that stylesheet</li><li>There are building tools that will concat all stylesheets and replace <code>@import</code></li></ul>]]></content>
    
    
    <categories>
      
      <category>notes</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Gzip Components</title>
    <link href="/blog/2015/08/02/web-performance-compress/"/>
    <url>/blog/2015/08/02/web-performance-compress/</url>
    
    <content type="html"><![CDATA[<h3 id="How-Compression-Works"><a href="#How-Compression-Works" class="headerlink" title="How Compression Works"></a>How Compression Works</h3><p>Starting with HTTP/1.1, web clients indicate support for compression with the <code>Accept-Encoding</code> header in the HTTP request.</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">Accept-Encoding: gzip, deflate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Web server sees this header will compress the reponse using one of the methods listed and nofify the client via the <code>Content-Encoding</code> header in the reponse</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">Content-Encoding: gzip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>Browsers that support <code>deflate</code> also support <code>gzip</code> but not the other way around, so <code>gzip</code> is the preferred method of compression.</p></blockquote><h3 id="What-to-Compress"><a href="#What-to-Compress" class="headerlink" title="What to Compress"></a>What to Compress</h3><ul><li>HTML documents</li><li>Scripts</li><li>Stylesheets</li><li>XML/JSON reponses  </li></ul><h4 id="Not-to-compress"><a href="#Not-to-compress" class="headerlink" title="Not to compress:"></a>Not to compress:</h4><ul><li>Image</li><li>PDF</li></ul><p>As they are already compressed. Trying to gzip wastes CPU resources and could also potentially increase file sizes.</p><h4 id="Cost-of-gzipping"><a href="#Cost-of-gzipping" class="headerlink" title="Cost of gzipping"></a>Cost of gzipping</h4><p>It takes additional CPU cycles on both server-side and client-side to compress and decompress the gzipped files. Generally, it’s worth gzipping any file greater than <strong>1 or 2K</strong>.</p>]]></content>
    
    
    <categories>
      
      <category>notes</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Add an Expires Header</title>
    <link href="/blog/2015/07/31/web-performance-expire-header/"/>
    <url>/blog/2015/07/31/web-performance-expire-header/</url>
    
    <content type="html"><![CDATA[<h3 id="Expires-Header"><a href="#Expires-Header" class="headerlink" title="Expires Header"></a>Expires Header</h3><p>By using a future <code>Expires</code> header, it makes images, scripts or stylesheets cacheable and avoids unnecessary HTTP requests on subsequent page views.</p><p><strong>Browsers</strong> use a cache to reduce the number of HTTP requests and decrease the size of HTTP response, thus making web pages load faster.<br><strong>Web servers</strong> use the <code>Expires</code> header to tell the browser that it can use the current copy of a resource file until the specified time.</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">Expires: Sun, 1 Aug 2015 14:30:00<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Max-Age-and-mod-expires"><a href="#Max-Age-and-mod-expires" class="headerlink" title="Max-Age and mod_expires"></a>Max-Age and mod_expires</h3><p>The <code>Cache-Control</code> header was introduced, as an alternative to the <code>Expires</code> header, in HTTP/1.1, to overcome limitations with the <code>Expires</code> header.</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">Cache-Control: max-age=315360000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>Expires</th><th>Cache-Control</th></tr></thead><tbody><tr><td>Specific date</td><td>Use <code>max-age</code> to define fresheness window in seconds</td></tr><tr><td>Expire date constantly checked</td><td></td></tr><tr><td>Once expire, new date must be provided</td><td></td></tr></tbody></table><p>If both are present, <code>max-age</code> directive will override the <code>Expires</code> header. </p><h3 id="Get-user-updated-when-cached-files-change"><a href="#Get-user-updated-when-cached-files-change" class="headerlink" title="Get user updated when cached files change"></a>Get user updated when cached files change</h3><p>To ensure users get the latest version of a file, change the filename in all HTML pages:</p><blockquote><p>The most effective solution is to change any links to them; that way, completely new representations will be loaded fresh from the origin server. </p></blockquote><p>Tips: Embed the version number in the filename (e.g. *my_js_file_v2.0.1.js).</p>]]></content>
    
    
    <categories>
      
      <category>notes</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Use Content Delivery Network (CDN)</title>
    <link href="/blog/2015/07/27/web-performance-cdn/"/>
    <url>/blog/2015/07/27/web-performance-cdn/</url>
    
    <content type="html"><![CDATA[<p>For website facing large audience, it’s necessary to deploy content across <strong>multiple</strong> and <strong>geographically dispersed</strong> servers.</p><blockquote><p>CDN is a collection of web servers distributed across multiple locations to deliver content to users more efficiently. CDNs are used to delivery static content, such as images, scripts stylesheets and Flash.</p></blockquote><p>Servers from the collection is selected based on a measure of network proximity (e.g. fewest networks hops, quickest response).</p><table><thead><tr><th>Pros</th><th>Cons</th></tr></thead><tbody><tr><td>Improve reponse time</td><td>Can be affectd by traffic from other websites from the same CDN providers</td></tr><tr><td>Backups, extended storage capacity</td><td>Inconvenience of not having control of the content servers (e.g. modifying HTTP reponse header)</td></tr><tr><td>Caching</td><td>Dependent on CDN provider’s performance</td></tr><tr><td>Absorb spikes in traffic</td><td></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>notes</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Make Fewer HTTP Request</title>
    <link href="/blog/2015/07/24/web-performance-fewer-request/"/>
    <url>/blog/2015/07/24/web-performance-fewer-request/</url>
    
    <content type="html"><![CDATA[<p>There are several techniques that help reduce HTTP requests, including:</p><ul><li>Using image maps (not very common nowadays)</li><li>CSS sprites (quite common)</li><li>inline images</li><li>combined scripts and stylesheets</li></ul><h3 id="1-Image-Map"><a href="#1-Image-Map" class="headerlink" title="1. Image Map"></a>1. Image Map</h3><p>There are 2 types of them:<br><strong>Server-side</strong> image maps: by submitting all clicks to the same destination URL, passing along the x,y coordinates of where the user clicked.<br><strong>Client-side</strong>: The mapping is achieved via HTML’s <code>&lt;map&gt;</code> tag.<br>Example:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">usemap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#map1<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>0</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/images/imagemap.gif<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>area</span> <span class="token attr-name">shape</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rect<span class="token punctuation">"</span></span> <span class="token attr-name">coords</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0,0,31,31<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>home.html<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Home<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>area</span> <span class="token attr-name">shape</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rect<span class="token punctuation">"</span></span> <span class="token attr-name">coords</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>36,0,66,31<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gifts.html<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Gifts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>area</span> <span class="token attr-name">shape</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rect<span class="token punctuation">"</span></span> <span class="token attr-name">coords</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>71,0,101,31<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cart.html<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Cart<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>area</span> <span class="token attr-name">shape</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rect<span class="token punctuation">"</span></span> <span class="token attr-name">coords</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>106,0,136,31<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>settings.html<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Settings<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>area</span> <span class="token attr-name">shape</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rect<span class="token punctuation">"</span></span> <span class="token attr-name">coords</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>141,0,171,31<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>help.html<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Help<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-CSS-Sprite"><a href="#2-CSS-Sprite" class="headerlink" title="2. CSS Sprite"></a>2. CSS Sprite</h3><p>The concept of CSS Sprite is to put all individual images into one big image and select part of it where you want it to be displayed as the background image of a html element (that supports background images like a <code>&lt;span&gt;</code> or <code>&lt;div&gt;</code>).</p><p>To “select” which image to show from the big image file, use the CSS <code>background-position</code> property</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'css_sprites.gif'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span></span><span class="token attr-value">            <span class="token property">background-position</span><span class="token punctuation">:</span> -260px -90px<span class="token punctuation">;</span></span><span class="token attr-value">            <span class="token property">width</span><span class="token punctuation">:</span> 26px<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 24px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>The 2 values, “-260px” and “-90px”, defines the top-left position of the sprite-image. In this case, to display the target small image, it requires the sprite-image to move left by 260px and up by 90px. And that’s why you never see positive values for <code>background-position</code>.</p><h3 id="3-Combined-Scripts-and-Stylesheets"><a href="#3-Combined-Scripts-and-Stylesheets" class="headerlink" title="3. Combined Scripts and Stylesheets"></a>3. Combined Scripts and Stylesheets</h3><p>Generally, using external scripts and stylesheets is better for performance. From software engineering’s point of view, it’s good to modularize the code by breaking it into many small files, which means more HTTP requests.</p><p>Combining files is easy, and minifying the files can also be done along with the combining process. However it will be difficult if different pages require different combinations of modules. (Maybe take a look at RequireJS)</p>]]></content>
    
    
    <categories>
      
      <category>notes</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Web Performance Overview</title>
    <link href="/blog/2015/07/22/web-performance-overview/"/>
    <url>/blog/2015/07/22/web-performance-overview/</url>
    
    <content type="html"><![CDATA[<h4 id="The-Performance-Golden-Rule"><a href="#The-Performance-Golden-Rule" class="headerlink" title="The Performance Golden Rule"></a>The Performance Golden Rule</h4><blockquote><p>Only 10-20% of the end user response time is spent downloading the HTML docu- ment. The other 80–90% is spent downloading all the components in the page.</p></blockquote><p>Most of the time, it takes less effort to optimize on front-end to achieve a faster overall reponse time than on back-end. And before diving into the specific tasks to improve web performance. It’s good to have a basic understanding of HTTP.</p><h4 id="HTTP-Overview"><a href="#HTTP-Overview" class="headerlink" title="HTTP Overview"></a>HTTP Overview</h4><p>HyperText Transfer Protocol (HTTP) is how browsers and servers communicate with each other over the Internet and made up of requests and responses.</p><p>There are 7 types of requests:</p><ul><li>GET</li><li>POST</li><li>HEAD</li><li>PUT</li><li>DELETE</li><li>OPTIONS</li><li>TRACE</li></ul><p>A request includes the type of request (e.g GET), a URL followed by headers. A response contains a status code, headers and a body.</p><h4 id="Compression"><a href="#Compression" class="headerlink" title="Compression"></a>Compression</h4><p>The size of reponse can be reduced using compression if <strong>both</strong> the browser and server support it. For example, the browser announces its support of <code>gzip</code> using the <code>Accept-Encoding</code> header. The server identify compressed responses using the <code>Content-Encoding</code> header.</p><p>Request:</p><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token constant">Accept</span><span class="token operator">-</span><span class="token constant">Encoding</span><span class="token punctuation">:</span> gzip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Response:</p><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token constant">Content</span><span class="token operator">-</span><span class="token constant">Encoding</span><span class="token punctuation">:</span> gzip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Conditional-GET"><a href="#Conditional-GET" class="headerlink" title="Conditional GET"></a>Conditional GET</h4><p>The browser may cache certain resource files like <code>.css</code> and <code>.js</code> files. To make sure those cached files are not modified since the time of last retrieval, a conditional GET request is sent by using <code>If-Modified-Since</code> header.</p><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token constant">If</span><span class="token operator">-</span><span class="token constant">Modified</span><span class="token operator">-</span><span class="token constant">Since</span><span class="token punctuation">:</span> <span class="token constant">Fri</span><span class="token punctuation">,</span> <span class="token number">24</span> <span class="token constant">Jul</span> <span class="token number">2015</span> <span class="token number">04</span><span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">54</span> <span class="token constant">GMT</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>And if the requested resource is not expired, server will respond with a ‘304 Not Modified’ status and <strong>skip sending the reponse body</strong>, resulting in a smaller and faster response.</p><h4 id="Keep-Alive"><a href="#Keep-Alive" class="headerlink" title="Keep-Alive"></a>Keep-Alive</h4><p>HTTP is built on top of TCP. In early days, every HTTP request required opening a new socket connection. Thus <em>Persistent Connections</em> (a.k.a “Keep-Alive” in HTTP/1.0) was introduced to let browsers make multiple requests over a single connection.</p><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token constant">Connection</span><span class="token punctuation">:</span> keep<span class="token operator">-</span>alive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Technically, <code>keep-alive</code> is not required in HTTP/1.1, but most browsers and servers still include it.</p>]]></content>
    
    
    <categories>
      
      <category>notes</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
